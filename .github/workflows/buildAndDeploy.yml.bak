# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
  # pull_request:
  # branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  installBuildAndUploadArtifact:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: install yarn, lerna, and package deps
        run: |
          npm i -g yarn@1.22.4 lerna@3
          echo $(yarn -v)
          yarn
      - name: build and tell about fungus
        env:
          REACT_APP_GOOGLE_CLIENT_ID: ${{secrets.GOOGLE_CLIENT_ID}}
          REACT_APP_SERVER: process.env.REACT_APP_SERVER+''
        run: |
          # no need to build server these days (API on hold)
          # lerna run build --stream
          cd packages/client
          yarn build
          echo PLEASE YOU ARE A FUNGI!
      # artifacts; seemingly unneeded
      # - name: upload client artifact
      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: client
      #     path: ./packages/client/build
      # - name: upload server artifact
      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: server
      #     path: ./packages/server/dist
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '290.0.1'
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: do gcloud stuff
        run: |
          echo ${{ secrets.GCP_SA_KEY }} | base64 > ./client-secret.json
          # This client-secret.json is converted by GCP_SA_KEY.
          gcloud auth activate-service-account ${{ secrets.GCP_SA_EMAIL }} --key-file=client-secret.json
          gcloud config set project ${{ secrets.PROJECT_ID }}
          gcloud -q app deploy
